<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="zh-cmn-Hans">
<head>
<meta charset="utf-8" />
<title>
	这是你要的树结构
</title>
<style>
/*Some basic CSS*/
* {margin: 0; padding: 0;}
/*To remove the scrollers*/
#canvas {display: block;}
</style>
<script>

window.onload = function(){
	var stop=false;
	var canvas = document.getElementById("canvas");
	
	var ctx = canvas.getContext("2d");
	//Lets resize the canvas to occupy the full page
	var W = window.innerWidth;
	var H = window.innerHeight;
	canvas.width = W;
	canvas.height = H;
	var leavesColor;
	var lc=[204,204,204];
	
	function inclc(){
		if(lc[2]+51>255){
			if(lc[1]+51>255){
				if(lc[0]+51>255){
					lc=[0,0,0];
				}else{
					lc[0] += 51;
					lc[1] = 0;
					lc[2] = 0;
				}
			}else{
				lc[1] += 51;
				lc[2] = 0;
			}
		}else{
			lc[2] += 51;
		}
	}
	
	//Some variables
	var length, divergence, reduction, line_width, start_points = [];
	canvas.onclick=function(){
		stop=!stop;
		if(!stop){
			inclc();
			init();
		}
	}
	init();
	
	function init()
	{
		if(stop) return;
		
		inclc();
		//filling the canvas white
		leavesColor = "";
		W = window.innerWidth;
		H = window.innerHeight;
		canvas.width = W;
		canvas.height = H;
		ctx.fillStyle = 'rgb('+(lc[0]+128>255?lc[0]-128:lc[0]+128)+','+(lc[1]+128>255?lc[1]-128:lc[1]+128)+','+(lc[2]+128>255?lc[2]-128:lc[2]+128)+')';
		ctx.fillRect(0, 0, W, H);
		ctx.lineCap="round";

		//Lets draw the trunk of the tree
		//lets randomise the variables
		//length of the trunk - 100-150
		length = 100 + Math.round(Math.random()*50);
		//angle at which branches will diverge - 10-60
		divergence = 10 + Math.round(Math.random()*50);
		//Every branch will be 0.75times of the previous one - 0.5-0.75
		//with 2 decimal points
		reduction = Math.round(50 + Math.random()*20)/100;
		//width of the branch/trunk
		line_width = 15;
		
		//This is the end point of the trunk, from where branches will diverge
		var trunk = {x: W/2, y: length+50, angle: 90};
		var st = {x: W/2, y:50, angle: 90};
		st.ctrl = trunk;
		st.color=RandomColor();
		//It becomes the start point for branches
		start_points = []; //empty the start points on every init();
		start_points.push(st);
		
		//Y coordinates go positive downwards, hence they are inverted by deducting it
		//from the canvas height = H
		//ctx.beginPath();
		//ctx.moveTo(st.x, H-st.y);
		//ctx.lineTo(trunk.x, H-trunk.y);
		//ctx.strokeStyle = "brown";
		//ctx.lineWidth = line_width;
		//ctx.stroke();
		
		branches();
	}
	
	function RandomColor(){
		var result='rgb(';
		result+=55+ Math.round(Math.round(Math.random()*200));
		result+=',';
		result+=55+ Math.round(Math.round(Math.random()*200));
		result+=',';
		result+=55+ Math.round(Math.round(Math.random()*200));
		result+=')';
		return result;
	}
	
	function changeReduction(){
		reduction = Math.round(55 + Math.random()*15)/100;
		return reduction;
	}
	
	function changeDivergence(){
		divergence = 10 + Math.round(Math.random()*80);
		return divergence;
	}
	
	//Lets draw the branches now
	function branches()
	{
		var redu = changeReduction();
		var diver = changeDivergence();
		
		treeColor = RandomColor();
		//leavesColor = RandomColor();
		//reducing line_width and length
		length = length * reduction;
		line_width = line_width * reduction;
		ctx.lineWidth = line_width;
		
		var new_start_points = [];
		
		for(var i = 0; i < start_points.length; i++)
		{
			var sp = start_points[i];
			var color1=leavesColor?leavesColor:RandomColor();
			var color2=leavesColor?leavesColor:RandomColor();
			//2 branches will come out of every start point. Hence there will be
			//2 end points. There is a difference in the divergence.
			var ep1 = get_endpoint(sp.ctrl.x, sp.ctrl.y, sp.angle+diver, length);
			var ep2 = get_endpoint(sp.ctrl.x, sp.ctrl.y, sp.angle-diver, length);
			
			//drawing the branches now
			ctx.beginPath();
			ctx.moveTo(sp.x, H-sp.y);
			ctx.quadraticCurveTo(sp.ctrl.x,H-sp.ctrl.y,ep1.x,H-ep1.y);
			var gradient=ctx.createLinearGradient(sp.x, H-sp.y, ep1.x, H-ep1.y);
			gradient.addColorStop("0",sp.color);
			<!-- gradient.addColorStop("0.5","blue"); -->
			gradient.addColorStop("1.0",color1);
			ctx.strokeStyle = gradient;
			ctx.stroke();
			//ctx.lineTo(ep1.x, H-ep1.y);
			
			ctx.beginPath();
			ctx.moveTo(sp.x, H-sp.y);
			ctx.quadraticCurveTo(sp.ctrl.x,H-sp.ctrl.y,ep2.x,H-ep2.y);
			//ctx.lineTo(ep2.x, H-ep2.y);
			var gradient=ctx.createLinearGradient(sp.x, H-sp.y, ep2.x, H-ep2.y);
			gradient.addColorStop("0",sp.color);
			<!-- gradient.addColorStop("0.5","blue"); -->
			gradient.addColorStop("1.0",color2);
			ctx.strokeStyle = gradient;
			ctx.stroke();
			
			//Time to make this function recursive to draw more branches
			ep1.angle = sp.angle+diver;
			ep2.angle = sp.angle-diver;
			
			ep1.color=color1;
			ep2.color=color2;
			
			//length = length * reduction;
			var ctrl1 = get_endpoint(ep1.x, ep1.y, ep1.angle, length);
			var ctrl2 = get_endpoint(ep2.x, ep2.y, ep2.angle, length);
			
			ep1.ctrl = ctrl1;
			ep2.ctrl = ctrl2;
			
			new_start_points.push(ep1);
			new_start_points.push(ep2);
			
			if(length>50){
				var diver3 = changeDivergence();
				var redu3 = changeReduction();
				var len3 = length * redu3;
				var color3 = leavesColor?leavesColor:RandomColor();
				var ep3 = get_endpoint(sp.ctrl.x, sp.ctrl.y, sp.angle, length);
				ctx.beginPath();
				ctx.moveTo(sp.x, H-sp.y);
				ctx.lineTo(ep3.x, H-ep3.y);
				var gradient=ctx.createLinearGradient(sp.x, H-sp.y, ep3.x, H-ep3.y);
				gradient.addColorStop("0",sp.color);
				<!-- gradient.addColorStop("0.5","blue"); -->
				gradient.addColorStop("1.0",color3);
				ctx.strokeStyle = gradient;
				setTimeout(ctx.stroke(),50);
				ep3.angle = sp.angle;
				ep3.color = color3;
				var ctrl3 = get_endpoint(ep3.x, ep3.y, ep3.angle, length);
				ep3.ctrl = ctrl3;
				new_start_points.push(ep3);
			}
		}
		//Lets add some more color
		//if(length < 6) ctx.strokeStyle = treeColor;
		//else ctx.strokeStyle = leavesColor;
		//ctx.stroke();
		start_points = new_start_points;
		//recursive call - only if length is more than 2.
		//Else it will fall in an long loop
		if(length<20) leavesColor = 'rgb('+lc[0]+','+lc[1]+','+lc[2]+')';
		if(length > 2) setTimeout(branches, 100);
		else setTimeout(init, 500);
	}
	function get_endpoint(x, y, a, length)
	{
		//This function will calculate the end points based on simple vectors
		//http://physics.about.com/od/mathematics/a/VectorMath.htm
		//You can read about basic vectors from this link
		var epx = x + length * Math.cos(a*Math.PI/180);
		var epy = y + length * Math.sin(a*Math.PI/180);
		return {x: epx, y: epy};
	}
}
</script>
</head>
<body>
<img src="example.png" height="0" width="0"/>
<canvas id="canvas"></canvas>
</body>
</html>